# Read about the usethis package

usethis::use_usethis()

# open the .Rprofile and add the one liner generated by above code which is already copied to the clipboard and save the .Rprofile. This is to load usethis when we start R so we dont have to say usethis::use_package("readr") each time and instead we can just write use_package like below

#Restart the R using palette

source("\~/.Rprofile")

# Add the usethis package as a workflow dependancy

use_package("usethis", "suggests")

#Workflow dependency: suggets #Build dependancy: Imports #“imports”
corresponds to build dependencies, while “suggests” are equivalent to
what we call workflow dependencies.

#Connect to Github

#Add the gitcreds package as a workflow dependency.
use_package("gitcreds", "suggests")

usethis::use_github()

# style speciif R files

# Use package styler as a workflow dependency

use_package("styler", "suggests")

# style the file we’re currently working on using the “style active file” RStudio addin. We use that through the Command Palette (Ctrl-Shift-P) and typing “style file”, which should show the “Style active file” option. This is what we will do frequently throughout the course.

styler:::style_active_file()

# style, commit , push

# to style whole directory

styler::style_dir()

#qmd and python works together. Qaurto is better than Rmd

#style the markdown files \# at project level

#Go to tools, project options , R markdown: canonical visual: true,
#text; wrapping:column, ok

# open learning R file doc:learning,qmd

#Add soemthing to the the learning,qmd file and save, it will
#automatically insert proper spacing

# Open up the README.md file and do all the TODO items found inside the file as well as inside the TODO.md file. Save often and watch as the Markdown gets reformatted.

#6. creating automated pipelines

# Targets: Using targets to manage a pipeline

Target allows you to explicitly specify the outputs you want to create.
targets will then track them for you and know which output depends on
which as well as which ones need to be updated when you make changes to
your pipeline.

#Pipeline A pipeline can be any process where the steps between a start
and an end point are very clear, explicit, and concrete. These highly
distinct steps can be manual, human involved, or completely automated by
a robot or computer.

# 1. function based workflow: target uses this, and an powerful way to make workflows

# 2. script based workflow: old fashioned

use_package("targets")

# add targets to our project

targets::use_targets() \# creates a file called targets.R
